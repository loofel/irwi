= Irwi

Irwi is a Ruby on Rails 3 plugin which adds wiki functionality to your application.

== Summary of modifications in this fork

This gem has been modified from its forked version to support generic file attachments, rather than just images, as well as private S3 uploads. However, it currently assumes that you are using Paperclip + Fog for storage, since it calls <tt>expiring_url</tt> on attachments to get expiring urls for private S3 files.

In addition, this version includes formatting instructions for Markdown by default.

== Installation

Add to your Gemfile:

  gem 'irwi', :git => 'git://github.com/neilgupta/irwi.git'

Then in your application directory call:

  script/generate irwi_wiki

It will generate:
* WikiPageController to serve wiki pages
* WikiPage model to represent page
* Migration to prepare database

Also it will add to your <tt>routes.rb</tt> something like:

  map.wiki_root '/wiki'

== Wiki syntax (links to other pages)

You can link pages by using

[[Some page title]]

construction in text. If linked page exists, when it will be replaced with link to this page, in other case it will be replaced with link to new page with such path/title.

== Template definition

You may create your own templates for controller actions (<tt>show</tt>, <tt>edit</tt> and <tt>history</tt>), in other case default built-in templates will be used.

== Helper definition

Following helpers are defined by default and you may replace them with you own:
* <tt>wiki_user</tt> - Renders user name or link by given user object. By default renders &lt;Unknown&gt; for <tt>nil</tt> and "User#{user.id}" for others.

== Configuration

Configuration options are acessed via <tt>Irwi.config</tt> object. Currently supported options:
* <tt>user_class_name</tt> - Name of user model class. By default - 'User'

 Define a method named 'current_user' method on WikiPagesController that returns the object for the current user 


* <tt>formatter</tt> - Formatter instance, which process wiki content before output. It should have method <tt>format</tt>, which gets a string and returns it formatted. By default instance of <tt>Irwi::Formatters::RedCloth</tt> is used (requires RedCloth gem). Other built-in formatter is <tt>Irwi::Formatters::BlueCloth</tt> (requires BlueCloth gem). Option accepts formatter instance, not class, so correct usage is:

  Irwi.config.formatter = Irwi::Formatters::RedCarpet.new

* <tt>comparator</tt> - Comparator instance, which builds and renders a set of changes between to texts. By default instance of <tt>Irwi::Comparators::DiffLcs</tt> is used (requires diff-lcs gem).

== Access control

If you want (and it's good idea) to specify which users can see or edit certain pages you should simply override following methods in your controller:
* <tt>show_allowed?</tt> - should return <tt>true</tt> when it's allowed for current user to see current page (@page).
* <tt>history_allowed?</tt> - should return <tt>true</tt> when it's allowed for user to see history of current page (@page) and compare it's versions.
* <tt>edit_allowed?</tt> - should return <tt>true</tt> when it's allowed for current user to modify current page (@page).

== Attachments

Irwi allows easy attachment integration in your wiki. There area several simple steps to add attachments to wiki pages:
* Call <tt>irwi_wiki_attachments</tt> generator. It will create WikiPageAttachment class.
* Include <tt>gem "paperclip"</tt> and <tt>gem "fog"</tt> in your <tt>Gemfile</tt>
* Append to initializer (or create a new one) something like

	Irwi.config.page_attachment_class_name = 'WikiPageAttachment'

	Paperclip::Attachment.default_options[:storage] = :fog
	Paperclip::Attachment.default_options[:fog_credentials] = {
		aws_access_key_id: 'AWS ACCESS KEY',
		aws_secret_access_key: 'AWS SECRET',
		provider: 'AWS',
		region: 'us-east-1'
	}
	Paperclip::Attachment.default_options[:fog_directory] = "AWS BUCKET"
	Paperclip::Attachment.default_options[:fog_public] = false

* Run <tt>rake db:migrate</tt> and start using attachments in your wiki!

== Contributors

* Alexey Noskov (http://github.com/alno)
* Ravi Bhim (http://github.com/ravibhim)
* Pavel Valodzka (http://github.com/valodzka)
* Xavier Defrang (http://github.com/xavier)
* Tomáš Pospíšek (http://github.com/tpo)
* Evan Arnold (http://github.com/earnold)
* https://github.com/alno/irwi/contributors

Feel free to add yourself when you add new features.

Copyright (c) 2009 Alexey Noskov, released under the MIT license
